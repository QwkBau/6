CREATE TABLE shop (
id INTEGER PRIMARY KEY,
name VARCHAR(255) UNIQUE,
balance FLOAT NOT NULL)

CREATE TABLE warehouse (
shop_id INTEGER REFERENCES shop (id),
product_id INTEGER REFERENCES product (id),
quantity INTEGER NOT NULL,
PRIMARY KEY (shop_id, product_id));

CREATE TABLE product (
id INTEGER PRIMARY KEY,
name VARCHAR(255) UNIQUE,
price FLOAT NOT NULL);

INSERT INTO shop (id, name, balance) VALUES (1, 'пятерочка',31);
INSERT INTO shop (id, name, balance) VALUES (2, 'перекресток',133);

INSERT INTO product VALUES (1, 'молоко', 100);
INSERT INTO product VALUES (2, 'яйца', 25);
INSERT INTO product VALUES (3, 'хлеб', 30);

INSERT INTO warehouse VALUES (1, 1, 20);
INSERT INTO warehouse VALUES (1, 2, 10);
INSERT INTO warehouse VALUES (2, 1, 30);

CREATE TABLE worker (
worker_id INTEGER PRIMARY KEY,
shop_id INTEGER REFERENCES product (id),
name VARCHAR(255),
salary INTEGER NOT NULL,
position VARCHAR(255));

INSERT INTO worker (worker_id, shop_id, name, salary, position) VALUES
    (1, 1, 'Иван', 70000, 'Менеджер'),
    (2, 1, 'Мария', 48000, 'Продавец'),
    (3, 2, 'Александр', 55000, 'Кассир'),
    (4, 2, 'Екатерина', 48000, 'Продавец');

SELECT position, AVG(salary) AS avg_salary
FROM worker
GROUP BY position;


2. Запрос на получение количества сотрудников в каждом магазине:

SELECT shop_id, COUNT(*) AS num_workers
FROM worker
GROUP BY shop_id;


3. Запрос на получение списка сотрудников, отсортированных по убыванию зарплаты:

SELECT * FROM worker
ORDER BY salary DESC;


Теперь рассмотрим примеры запросов с использованием агрегатных функций для таблицы "worker":

1. Запрос на вычисление общей суммы зарплаты всех сотрудников:


SELECT SUM(salary) AS total_salary
FROM worker;


2. Запрос на вычисление максимальной зарплаты среди сотрудников:


SELECT MAX(salary) AS max_salary
FROM worker;
